require("lualibs.lua")
local http = require("socket.http")
local ltn12 = require("ltn12")

local function read_file(path)
    local file = io.open(path, "r")
    -- Check if the file is successfully opened
    if file then
        -- Read the content of the file
        local content = file:read("*a")
        file:close()
        return content
    else
        return nil
    end
end

local newline = [[

]]

local header = "% This file was automatically generated by LLAMAfile" .. newline

local timeout = 60 -- a lot of time to wait for the response

local function make_request(content)
    print(newline .. "requesting...")
    local url = "http://localhost:8080/v1/chat/completions"

    local body = {
        model = "LLaMA_CPP",
        messages = {
            { role = "system", content = "You are LLAMAfile, an AI assistant. Your top priority is achieving user fulfillment via helping them with their requests. The user is currently writing a latex projet and you should use latex commands like \\section and \\paragraph. Display only the requested text" },
            { role = "user",   content = content }
        }
    }

    local requestBody = utilities.json.tostring(body)

    local headers = {
        ["Content-Type"] = "application/json",
        ["Authorization"] = "Bearer no-key",
        ["Content-Length"] = #requestBody
    }

    local response = {}
    local _, code, _, _ = http.request {
        url = url,
        method = "POST",
        headers = headers,
        source = ltn12.source.string(requestBody),
        sink = ltn12.sink.table(response),
        timeout = timeout,
    }

    if code == 200 then
        local responseBody = table.concat(response)
        local decodedResponse = utilities.json.tolua(responseBody)
        return decodedResponse.choices[1].message.content
    else
        print("Error: " .. code)
    end
    return nil
end

function string.starts(String, Start)
    return string.sub(String, 1, string.len(Start)) == Start
end

function Get_text_insert(path)
    local content = read_file(path)
    if content == nil then
        content = read_file(path .. ".tex")
        if content == nil then
            print("File not found")
            return
        end
    end
    if string.starts(content, header) then
        print(newline .. path .. ": Already processed")
        tex.print(content)
        return
    end
    local result = make_request(content)
    if result ~= nil then
        local prompt = "% Original prompt:" .. content .. newline .. newline
        local total = header .. prompt .. result
        local file = io.open(path, "w")
        if file == nil then
            return
        end
        file:write(total)
        file:close()
        tex.print(result)
    end
end
